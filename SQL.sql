-- CREATION OF DATABSE
CREATE DATABASE DEMO;  

-- USING THE CREATED DATABASE
USE DEMO;

-- CREATING TABLE
CREATE TABLE DEMO (
	ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    MARKS INT NOT NULL,
    GRADE CHAR(1),
    CITY VARCHAR(20)
    );

    
-- INSERTING THE ELEMENTS ALL AT ONCE USING VALUES
INSERT INTO DEMO VALUES
(11,"Pranav",50,'A',"Pune"),
(22,"Mohan",30,'B',"Mumbai"),
(33,"Prathamesh",60,'C',"Delhi");

-- INSERTING ONE VLAUE AT A TIME
INSERT INTO DEMO VALUE
(23,"shan",40,'A',"Pune");


-- DISPLAYING ALL DATA
SELECT * FROM DEMO;


-- WHERE CLAUSE 

SELECT * FROM DEMO
WHERE MARKS < 50 OR CITY = "PUNE";


SELECT * FROM DEMO;

SELECT * FROM DEMO 
WHERE  MARKS BETWEEN 10 AND 40;

SELECT * FROM DEMO 
WHERE CITY IN ("Pune","Mumbai");


SELECT * FROM DEMO
WHERE CITY NOT IN ("PUNE");

-- LIMIT CLAUSE

SELECT * FROM DEMO 
WHERE CITY = "Pune"
LIMIT 3;

SELECT * FROM DEMO
ORDER BY ID ASC;

SELECT * FROM DEMO
ORDER BY ID DESC;

SELECT * FROM DEMO
ORDER BY MARKS DESC
LIMIT 5;

SELECT * FROM DEMO
ORDER BY MARKS ASC
LIMIT 5;

-- AGGREGATE CAKUESES 

SELECT AVG(MARKS) FROM DEMO;

SELECT COUNT("PUNE") FROM DEMO;

SELECT MAX(MARKS) FROM DEMO;

SELECT MIN(MARKS) FROM DEMO;

SELECT SUM(MARKS) FROM DEMO;

-- GROUP BY CLAUSE

SELECT CITY , COUNT(ID) FROM DEMO
GROUP BY CITY;

SELECT MARKS , COUNT(NAME) FROM DEMO
GROUP BY MARKS;

SELECT GRADE , COUNT(ID) FROM DEMO
GROUP BY GRADE
ORDER BY GRADE;


-- UPDATE OPERATION

UPDATE DEMO
SET GRADE = "O"
WHERE GRADE = "A";

UPDATE DEMO 
SET MARKS = 90
WHERE NAME = "Pranav";

UPDATE DEMO
SET GRADE = "A"
WHERE MARKS BETWEEN 80 AND 90;

UPDATE DEMO
SET MARKS = MARKS + 1;



-- DELETE OPERATION

DELETE FROM DEMO
WHERE MARKS <= 32;


-- DELETE FROM DEMO WILL DELETE EVERTHING
SELECT * FROM DEMO;

-- FOREGIN KEY

CREATE DATABASE COLLEGE;

USE COLLEGE;

CREATE TABLE DEPT (
	ID INT PRIMARY KEY,
    NAME VARCHAR(50)
);

INSERT INTO DEPT VALUES
(101,"ENGLISH"),
(102,"SCIENCE"),
(103,"HINDI");


CREATE TABLE TEACHER (
	ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    DEPT_ID INT ,
    FOREIGN KEY (DEPT_ID) REFERENCES  DEPT(ID)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);


INSERT INTO TEACHER VALUES
(101,"V.D.K",101),
(102,"DINESH",102),
(103,"POOJA",103);



UPDATE DEPT
SET ID = 104
WHERE ID = 101;



UPDATE DEPT
SET ID = 120
WHERE ID = 104;


SELECT * FROM TEACHER;

SELECT * FROM DEPT;


-- ALTER COMMAND

CREATE DATABASE STUDENT;

USE STUDENT;

CREATE TABLE DATA (
	ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    MARKS INT NOT NULL,
    GRADE CHAR(1),
    CITY VARCHAR(20)
    );


INSERT INTO DATA VALUES
(11,"Pranav",50,'A',"Pune"),
(22,"Mohan",30,'B',"Mumbai"),
(33,"Prathamesh",60,'C',"Delhi"),
(23,"shan",40,'A',"Pune");

SELECT * FROM DATA;

-- ADD TABLE COLUMN
ALTER TABLE DATA
ADD COLUMN AGE INT;

SELECT * FROM DATA;

-- DROP TABLE COLUMN 

ALTER TABLE DATA
DROP COLUMN AGE;

SELECT * FROM DATA;

-- RENAME TABLE NAME

ALTER TABLE DATA
RENAME TO INFO;

SELECT * FROM INFO;

-- CHANGE COULMN NAME

ALTER TABLE INFO
CHANGE MARKS SCORE INT NOT NULL;

SELECT * FROM INFO;


-- MODIFY COLUMN (DATA TYPE OR CONSTRAINT)

ALTER TABLE INFO
MODIFY SCORE INT ;

SELECT * FROM INFO;


-- TRUNCATE
TRUNCATE TABLE INFO;

SELECT * FROM INFO;

-- JOINTS

-- 1)INNER JOINTS

-- RETURNS RECORDS THAT HAVE MATCHING VALUES IN BOTH TABLES

CREATE DATABASE INNER_JOIN_EXAMPLE;

USE INNER_JOIN_EXAMPLE;

CREATE TABLE STUDENT (
	ID INT PRIMARY KEY,
    NAME VARCHAR(50)
);

INSERT INTO STUDENT VALUES
(101,"V.D.K"),
(102,"DINESH"),
(103,"POOJA");

SELECT * FROM STUDENT;

CREATE TABLE COURSE (
	ID INT PRIMARY KEY,
    COURSE_NAME VARCHAR(50)
);

INSERT INTO COURSE VALUES
(104,"ENGG"),
(101,"MED"),
(103,"AIR");

SELECT * FROM COURSE;

SELECT * 
FROM STUDENT AS S
INNER JOIN COURSE AS C
ON S.ID = C.ID;



-- 2)LEFT JOIN

-- RETURNS ALL RECORDS FROM THE TABLE, AND THE MATCHED RECORDS FROM THE RIGHT TABLE

SELECT * 
FROM STUDENT AS S
LEFT JOIN COURSE AS C
ON S.ID = C.ID;

-- 3)RIGHT JOIN

-- RETURNS ALL RECORDS FROM THE RIGHT TABLE , AND THE MATCHED RECORDS FROM THE LEFT TABLE

SELECT * 
FROM STUDENT AS S
RIGHT JOIN COURSE AS C
ON S.ID = C.ID;

-- 4)FULL JOIN

-- RETUNS ALL RECORDS WHEN THERE IS A MATCH IN EITHER LEFT OR RIGHT TABLE

SELECT * 
FROM STUDENT AS S
LEFT JOIN COURSE AS C
ON S.ID = C.ID
UNION 
SELECT * 
FROM STUDENT AS S
RIGHT JOIN COURSE AS C
ON S.ID = C.ID;


-- LEFT EXCLUSIVE JOIN

SELECT * 
FROM STUDENT AS S
LEFT JOIN COURSE AS C
ON S.ID = C.ID
WHERE C.ID IS NULL;


-- RIGHT EXCLUDIVE JOIN

SELECT *
FROM STUDENT AS S
RIGHT JOIN COURSE AS C
ON S.ID = C.ID
WHERE S.ID IS NULL;

-- SELF JOIN

-- IT IS A REGULAR JOIN BUT THE TABLE IS JOINED WITH ITSELF

CREATE TABLE EMPL(
	ID INT NOT NULL,
    NAME VARCHAR(50),
    MANAGER_ID INT
);	



INSERT INTO EMPL VALUES
(101,"Pranav",102),
(102,"Mohan",105),
(103,"Prathamesh",NULL),
(105,"shan",103);

SELECT * FROM EMPL;

SELECT E1.NAME AS MANAGER , E2.NAME
FROM EMPL AS E1
JOIN EMPL AS E2
ON E1.ID = E2.MANAGER_ID;


-- UNION

-- IT IS USED TO COMBINE THE RESULT-SET OF TWO OR MORE SELECT STATEMENTS 

SELECT NAME FROM EMPL
UNION 
SELECT NAME FROM EMPL;

SELECT NAME FROM EMPL
UNION ALL
SELECT NAME FROM EMPL;


-- SUBQERY
CREATE TABLE STUD_DATA(
	ID INT NOT NULL,
    NAME VARCHAR(50),
    MARKS INT
);	


INSERT INTO STUD_DATA VALUES
(101,"Pranav",39),
(102,"Mohan",43),
(103,"Prathamesh",72),
(105,"shan",33);

SELECT * FROM STUD_DATA;

SELECT AVG(MARKS) FROM STUD_DATA;

SELECT NAME,MARKS FROM STUD_DATA
WHERE MARKS > 46.7500;

SELECT NAME,MARKS FROM STUD_DATA
WHERE MARKS > 
(SELECT AVG(MARKS) FROM STUD_DATA);

INSERT INTO STUD_DATA VALUES
(151,"vIMANY",39),
(122,"han",43),
(113,"thamesh",72),
(100,"shanDFD",33);

SELECT ID FROM STUD_DATA
WHERE ID % 2 =0;

SELECT NAME , ID FROM STUD_DATA
WHERE ID IN
(SELECT ID FROM STUD_DATA WHERE ID % 2 = 0);

ALTER TABLE STUD_DATA
ADD COLUMN CITY VARCHAR(30);


CREATE TABLE STUD_DATA(
	ID INT NOT NULL,
    NAME VARCHAR(50),
    MARKS INT,
    CITY VARCHAR(30)
);	

INSERT INTO STUD_DATA VALUES
(151,"vIMANY",39,"Pune"),
(122,"han",43,"Delhi"),
(113,"thamesh",72,"Delhi"),
(100,"shanDFD",33,"Delhi");



SELECT * FROM STUD_DATA;


SELECT MAX(MARKS)
FROM ( SELECT * FROM STUD_DATA WHERE CITY = "Delhi") AS TEMP;


SELECT (SELECT MAX(MARKS) FROM STUD_DATA)  , NAME FROM STUD_DATA;


-- MYSQL VIEWS

-- A VIEW IS A VIRTUAL TABLE BASED ON THE RESULT-SET OF AN SQL STATEMENT

CREATE VIEW DEMO AS 
SELECT NAME,CITY FROM STUD_DATA;

SELECT * FROM DEMO;

DROP VIEW DEMO;